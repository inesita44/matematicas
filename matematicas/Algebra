{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/inesita44/matematicas/blob/main/matematicas/Algebra\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Práctica 3. Álgebra**\n",
        "* Para aprender sobre Python vea la playlist [Python para Matemáticas](https://www.youtube.com/playlist?list=PL8gpDXwO-9l4HkDJ9QhB4H-cOiT0BYGau)\n",
        "* Para obtener ideas y vídeos para la resolución de la práctica vea los archivos siguientes: [Ideas](https://github.com/financieras/math/tree/main/ideas)"
      ],
      "metadata": {
        "id": "b13aYMDxmd7v"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Práctica 3.1**\n",
        "**Determinante en Excel**  \n",
        "\n",
        "* Cree un fichero en Excel de nombre algebra.xlsm.\n",
        "* La extensión **xlsm** corresponde a los archivos de Excel habilitados para macros.\n",
        "* Utilice la Hoja 1 para hacer la Práctica 3.1.\n",
        "* Se pide:\n",
        " 1. Cree una matriz cuadrada de dimensión 5×5, formada por números aleatorios enteros entre -9 y +9.\n",
        " 2. Calcule el determinante de esta matriz\n",
        " 3. Cree un programa en **VBA** que busque una matriz de este tipo cuyo determinante sea cero.\n",
        " 4. Copie la matriz encontrada y péguela debajo con \"pegado especial valores\" para que no varíe su contenido al efectuar el recálculo manual de la hoja."
      ],
      "metadata": {
        "id": "XWa9IdzJmpbB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Práctica 3.2**\n",
        "**Matriz inversa en Excel**  \n",
        "\n",
        "* Use el mismo archivo de Excel con extensión **xlsm** del caso anterior. \n",
        "* Utilice la Hoja 2 para hacer la Práctica 3.2.\n",
        "* Se pide:\n",
        " 1. Crea la matriz $A$ que es una matriz cuadrada de dimensiones 5×5 usando números aleatorios enteros entre -9 y +9, excepto cero\n",
        " 2. Calcule su determinante\n",
        " 3. Calcule su transpuesta usando la función ```TRANSPONER```\n",
        " 4. Calcule su matriz inversa $A^{-1}$\n",
        " 5. Multiplique la matriz $A$ por su inversa $A^{-1}$ y compruebe que el producto es la matriz identidad.\n",
        " $$AA^{-1}=I$$"
      ],
      "metadata": {
        "id": "cP-ppBE1rzGW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Práctica 3.3**\n",
        "**Resolución de sistemas lineales en Excel**  \n",
        "\n",
        "* Use el mismo archivo de Excel con extensión **xlsm** del caso anterior. \n",
        "* Utilice la Hoja 3 para hacer la Práctica 3.3.\n",
        "* Se pide:\n",
        " 1. Cree un sistema de 5 ecuaciones con 5 incógnitas con **solución única**.\n",
        " 2. Una de las ecuaciones será: $\\quad x_1+2x_2-x_3+x_4-3x_5=6$\n",
        " 3. Muestre las ecuaciones del sistema usando el [editor de ecuaciones](https://support.microsoft.com/es-es/office/editor-de-ecuaciones-6eac7d71-3c74-437b-80d3-c7dea24fdf3f) de Excel. $\\quad Ax=b$\n",
        " 4. Monte la matriz $A$ del sistema de ecuaciones y la matriz $b$ con los términos independientes. Muestre ambas matrices.\n",
        " 5. Calcule la matriz inversa $A^{-1}$\n",
        " 6. Resuelva el sistema lineal de ecuaciones con este método: $\\quad Ax=b \\quad \\Longrightarrow \\quad x=A^{-1}b$\n",
        " 7. Compruebe si el resultado obtenido es la solución del sistema de ecuaciones. Justifique esa comprobación."
      ],
      "metadata": {
        "id": "jJRClauctBdf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Práctica 3.4**\n",
        "**Matriz inversa en Python**  \n",
        "\n",
        "Desarrolla un código en Python que al ejecutarse consiga los siguientes apartados.  \n",
        "1. Crea una matriz cuadrada de dimensiones 3×3 usando números aleatorios enteros entre -9 y +9, excepto cero\n",
        "2. Buscar un caso donde el determinante sea igual a 1\n",
        "3. Si el determinante es 1 imprime la matriz y su determinante\n",
        "4. Calcula e imprime su transpuesta\n",
        "5. Calcula e imprime su matriz inversa\n",
        "6. Multiplica la matriz creada por su inversa y comprueba que el producto es la matriz identidad.\n",
        "7. Calcula cuantos segundos ha tardado en realizarse el proceso."
      ],
      "metadata": {
        "id": "EMlUZC6Lqzfs"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **SOLUCIÓN 3.4**"
      ],
      "metadata": {
        "id": "vDMF-Dvs_yTG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "import numpy as np\n",
        "from time import process_time\n",
        "t1 = process_time()\n",
        "\n",
        "n = 3   # orden nxn de la matriz cuadrada\n",
        "print(\"Matriz 3x3:\")\n",
        "while True:\n",
        "    m = np.random.choice(list(range(-9,0)) + list(range(1,10)), size=(n, n))   # aleatorios enteros entre -9 y +9 excepto el 0\n",
        "    determ = np.linalg.det(m)\n",
        "    if determ == 1:\n",
        "        print(m)\n",
        "        break\n",
        "print()\n",
        "print(f\"El determinante de la matriz es {determ}\")\n",
        "print(\"\\nTranspuesta:\")\n",
        "print(np.transpose(m))\n",
        "print()\n",
        "print(\"Inversa:\")\n",
        "minv = np.linalg.inv(m)\n",
        "print(minv)\n",
        "print()\n",
        "print(\"Matriz por su inversa igual a la matriz identidad:\\n\" , np.dot(m, minv))\n",
        "print()\n",
        "\n",
        "t2 = process_time()\n",
        "print(f\"El proceso ha tardado en realizarse {t2-t1} segundos.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eCbTzagP4xzZ",
        "outputId": "7c1eb52c-07a7-45c5-d34b-87ccb8bc38a9"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Matriz 3x3:\n",
            "[[ 2 -2 -9]\n",
            " [ 4 -5  2]\n",
            " [-1  1  4]]\n",
            "\n",
            "El determinante de la matriz es 1.0\n",
            "\n",
            "Transpuesta:\n",
            "[[ 2  4 -1]\n",
            " [-2 -5  1]\n",
            " [-9  2  4]]\n",
            "\n",
            "Inversa:\n",
            "[[-22.  -1. -49.]\n",
            " [-18.  -1. -40.]\n",
            " [ -1.  -0.  -2.]]\n",
            "\n",
            "Matriz por su inversa igual a la matriz identidad:\n",
            " [[1. 0. 0.]\n",
            " [0. 1. 0.]\n",
            " [0. 0. 1.]]\n",
            "\n",
            "El proceso ha tardado en realizarse 1.286598958 segundos.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Práctica 3.5**\n",
        "**Resolución de sistemas lineales en Python**  \n",
        "\n",
        "1. Cree un sistema de 4 ecuaciones con 4 incógnitas con **solución única**.\n",
        "2. La solución del sistema es: $\\; \\begin{pmatrix}x_1, x_2, x_3, x_4\\end{pmatrix} = \\begin{pmatrix} 3, 4, 5, 2\\end{pmatrix}$  \n",
        "3. Una de las ecuaciones del sistema es: $\\enspace x_1+3x_2-x_3-2x_4=6$  \n",
        "4. El vector $b$ de términos independientes es: $\\enspace b=\\begin{pmatrix}6, 3, 5, 7\\end{pmatrix}$  \n",
        "5. Usando números aleatorios elija los coeficientes que faltan de la matriz $A$ del sistema de ecuaciones.\n",
        "  - Los coeficientes deben ser números enteros entre -5 y +5, excluido el cero.\n",
        "  - Imprima la matriz $A$.  \n",
        "6. Calcule e imprima el determinante de $A$.\n",
        "7. Calcule e imprima la matriz inversa $A^{-1}$  \n",
        "8. Resuelva el sistema lineal de ecuaciones con este método: $$Ax=b \\quad \\Longrightarrow \\quad x=A^{-1}b$$\n",
        "9. Compruebe que el resultado obtenido es la solución del sistema de ecuaciones.  \n",
        "10. Resuelva nuevamente el sistema de ecuaciones usando ```np.linalg.solve```."
      ],
      "metadata": {
        "id": "tQQS7GPXIdjH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **SOLUCIÓN 3.5**"
      ],
      "metadata": {
        "id": "9UmB6zl2eDoa"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Matriz $A$**"
      ],
      "metadata": {
        "id": "gZcRWNZbiDfX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "v = np.array([3,4,5,2]) #La solución del sistema (x1,x2,x3,x4)\n",
        "\n",
        "def busca(b):\n",
        "    while True:\n",
        "        w = np.random.choice(list(range(-5,0)) + list(range(1,6)), 4) #números aleatorios enteros entre -5 y +5, excluido el cero, la matriz es 4x4.\n",
        "        if np.matmul(v, w) == b:\n",
        "            break\n",
        "    return w\n",
        "\n",
        "b = 6; print(f\"[1  3  -1 -2] x {v} = {b}\") #Una de las ecuaciones del sistema es: x1 +3x2 −x3 −2x4 = 6\n",
        "b = 3; print(f\"{busca(b)} x {v} = {b}\")\n",
        "b = 5; print(f\"{busca(b)} x {v} = {b}\")\n",
        "b = 7; print(f\"{busca(b)} x {v} = {b}\")\n",
        "\n",
        "#El vector b de términos independientes es: b=(6,3,5,7)\n",
        "#Al ejecutarlo las filas 2,3 y 4 varían"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LDVdaQFbeyvx",
        "outputId": "a6841146-ca37-47fa-c51d-d597310b56ba"
      },
      "execution_count": 219,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1  3  -1 -2] x [3 4 5 2] = 6\n",
            "[ 1 -1  2 -3] x [3 4 5 2] = 3\n",
            "[ 1 -4  2  4] x [3 4 5 2] = 5\n",
            "[-4  1  1  5] x [3 4 5 2] = 7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "f1 = [1,3,-1,-2]\n",
        "f2 = [-5,1,4,-3]\n",
        "f3 = [5,-2,-2,4]\n",
        "f4 = [-1,5,-4,5]\n",
        "matriz = [f1, f2, f3, f4]\n",
        "print(matriz)\n",
        "print()\n",
        "np.array(matriz)\n",
        "\n",
        "#Dicha matriz es una solución de la ejecución del código anterior. "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M-L-wNhLvbpo",
        "outputId": "c19e7f92-2ea8-49d5-b0a0-84e7e7b0a2af"
      },
      "execution_count": 220,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1, 3, -1, -2], [-5, 1, 4, -3], [5, -2, -2, 4], [-1, 5, -4, 5]]\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 1,  3, -1, -2],\n",
              "       [-5,  1,  4, -3],\n",
              "       [ 5, -2, -2,  4],\n",
              "       [-1,  5, -4,  5]])"
            ]
          },
          "metadata": {},
          "execution_count": 220
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Determinante de $A$**"
      ],
      "metadata": {
        "id": "1SFGnvMEiP29"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "m = [[1,3,-1,-2], [-5,1,4,-3], [5,-2,-2,4], [-1,5,-4,5]]\n",
        "np.linalg.det(m)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e-63_MDBibPM",
        "outputId": "7af90613-cc9d-49f4-ba76-9ccd9c4f0c90"
      },
      "execution_count": 222,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "308.0000000000001"
            ]
          },
          "metadata": {},
          "execution_count": 222
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Matriz inversa $A^{-1}$**"
      ],
      "metadata": {
        "id": "OXApEBKIii_H"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "a = np.array([[1,3,-1,-2], [-5,1,4,-3], [5,-2,-2,4], [-1,5,-4,5]])\n",
        "a_inv = np.linalg.inv(a)\n",
        "print(a_inv)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i4SZQxyVij9F",
        "outputId": "c1dc580e-2c0a-4f98-f078-c649dce929f9"
      },
      "execution_count": 223,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 0.23376623  0.15584416  0.2987013  -0.05194805]\n",
            " [ 0.25974026  0.25649351  0.22077922  0.08116883]\n",
            " [ 0.16883117  0.52922078  0.49350649 -0.00974026]\n",
            " [-0.07792208  0.19805195  0.23376623  0.10064935]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **$Ax=b\\quad\\Longrightarrow\\quad x=A^{-1}b$**"
      ],
      "metadata": {
        "id": "W81IjY1BiwaY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "a = np.array([[1,3,-1,-2], [-5,1,4,-3], [5,-2,-2,4], [-1,5,-4,5]])\n",
        "b = np.array([6,3,5,7])\n",
        "a_inv = np.linalg.inv(a)\n",
        "np.dot(a_inv, b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mZdTfluuivOE",
        "outputId": "8510f6ed-118a-4966-94d4-4cdb271c09ba"
      },
      "execution_count": 224,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([3., 4., 5., 2.])"
            ]
          },
          "metadata": {},
          "execution_count": 224
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##  **Resolución del sistema de ecuaciones usando ```np.linalg.solve```**"
      ],
      "metadata": {
        "id": "cweWLHvjjR8J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "a = np.array([[1,3,-1,-2], [-5,1,4,-3], [5,-2,-2,4], [-1,5,-4,5]])\n",
        "b = np.array([6,3,5,7])\n",
        "solucion = np.linalg.solve(a,b)\n",
        "solucion"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "80NKwn5rjTJy",
        "outputId": "229bb0c4-9b3f-4943-ea6d-fa12806d1d87"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([3., 4., 5., 2.])"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Práctica 3.6**\n",
        "**Resolución de sistemas lineales con Octave**  \n",
        "\n",
        "1. Tome el mismo sistema 4x4 con solución única del ejercicio anterior.\n",
        "2. Muestra el sistema usando $\\LaTeX$\n",
        "3. Resuélvelo con Octave por dos métodos\n",
        "4. ¿Ambos métodos dan el mismo resultado?"
      ],
      "metadata": {
        "id": "M39ufifh_Jr8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **SOLUCIÓN 3.6**\n"
      ],
      "metadata": {
        "id": "MPN7UZyzEQuP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##**Sistema usando $\\LaTeX$**"
      ],
      "metadata": {
        "id": "qN00H3ZEEpRM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "$$\\begin{matrix} \n",
        "x_1 & +&  3x_2 &  -& x_3 &  -&2x_4 & = &6 \\\\\n",
        "-5x_1 & +&  x_2 &  +& 4x_3 &  -&3x_4 & = &3 \\\\\n",
        "5x_1 & -&  2x_2 &  -& 2x_3 &  +&4x_4 & = &5 \\\\\n",
        "-x_1 & +& 5x_2 &  -& 4x_3 &  +&5x_4 & =&7\n",
        "\\end{matrix}$$"
      ],
      "metadata": {
        "id": "IIIkmpz5HCT_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Octave método 1**"
      ],
      "metadata": {
        "id": "mGbc62hZHIuS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!apt install octave"
      ],
      "metadata": {
        "id": "AcwnGU7xnt0F"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile metodo1\n",
        "A = [1, 3, -1, -2; -5, 1, 4, -3; 5, -2, -2, 4; -1, 5, -4, 5]\n",
        "b = [6; 3; 5; 7]\n",
        "x= inv(A)*b\n",
        "% solución 1, rats expresa los número como fracciones o enteros\n",
        "s1=rats(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "62VQdVOmo8Kr",
        "outputId": "020427e6-945b-4428-b628-6daf9a6c099f"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting metodo1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!octave metodo1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RtcHvLhyqHz6",
        "outputId": "d340e6b1-5d6b-4752-92c2-8cc327cde52d"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "octave: X11 DISPLAY environment variable not set\n",
            "octave: disabling GUI features\n",
            "A =\n",
            "\n",
            "   1   3  -1  -2\n",
            "  -5   1   4  -3\n",
            "   5  -2  -2   4\n",
            "  -1   5  -4   5\n",
            "\n",
            "b =\n",
            "\n",
            "   6\n",
            "   3\n",
            "   5\n",
            "   7\n",
            "\n",
            "x =\n",
            "\n",
            "   3\n",
            "   4\n",
            "   5\n",
            "   2\n",
            "\n",
            "s1 =\n",
            "\n",
            "          3\n",
            "          4\n",
            "          5\n",
            "          2\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Octave método 2**"
      ],
      "metadata": {
        "id": "zDc6rl0mHXzU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!apt install octave"
      ],
      "metadata": {
        "id": "nCqs91vx9shY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f351171a-e454-428e-ec78-867b28471842"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Reading package lists... Done\n",
            "Building dependency tree       \n",
            "Reading state information... Done\n",
            "octave is already the newest version (4.2.2-1ubuntu1).\n",
            "The following package was automatically installed and is no longer required:\n",
            "  libnvidia-common-460\n",
            "Use 'apt autoremove' to remove it.\n",
            "0 upgraded, 0 newly installed, 0 to remove and 23 not upgraded.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile metodo2\n",
        "G = [1, 3, -1, -2, 6; -5, 1, 4, -3, 3; 5, -2, -2, 4, 5; -1, 5, -4, 5, 7]\n",
        "escalonada = rref(G)\n",
        "% solución 2\n",
        "s2 = rats(escalonada)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e2H-6NAJqYap",
        "outputId": "86197ad1-28bc-4cfb-d280-e1c406c13132"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting metodo2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!octave metodo2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WBLJeWdWqvk0",
        "outputId": "ed3ba5d4-4876-41ab-a5e1-cce0f1d3ea82"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "octave: X11 DISPLAY environment variable not set\n",
            "octave: disabling GUI features\n",
            "G =\n",
            "\n",
            "   1   3  -1  -2   6\n",
            "  -5   1   4  -3   3\n",
            "   5  -2  -2   4   5\n",
            "  -1   5  -4   5   7\n",
            "\n",
            "escalonada =\n",
            "\n",
            "   1.00000   0.00000   0.00000   0.00000   3.00000\n",
            "   0.00000   1.00000   0.00000   0.00000   4.00000\n",
            "   0.00000   0.00000   1.00000   0.00000   5.00000\n",
            "   0.00000   0.00000   0.00000   1.00000   2.00000\n",
            "\n",
            "s2 =\n",
            "\n",
            "          1          0          0          0          3\n",
            "          0          1          0          0          4\n",
            "          0          0          1          0          5\n",
            "          0          0          0          1          2\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **¿Ambos métodos dan el mismo resultado?**"
      ],
      "metadata": {
        "id": "nmDC5wE1Hypd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Sí, ya que como bien se dice en el enunciado de dicho ejercicio, esta matriz es una matriz 4x4 con solución única."
      ],
      "metadata": {
        "id": "Z3Z7LKWXrJVV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Práctica 3.7**\n",
        "**Diagonalización en Python**\n",
        "\n",
        "* Sea la matriz cuadrada $A$ de orden 4x4\n",
        "\n",
        "$$A=\\left(\n",
        "\\begin{array}{rrrr}\n",
        " -1 &-2 &  3 &-1 \\\\\n",
        "  0 & 2 &  0 & 0 \\\\\n",
        "  0 & 0 &  2 & 0 \\\\\n",
        "  0 & 0 &  0 & 1\n",
        "\\end{array}\n",
        "\\right)$$\n",
        "1. Calcula los **autovalores** y **autovectores**\n",
        "2. Calcula y muestra:\n",
        " - la matriz diagonal $D$\n",
        " - la matriz de paso $P$\n",
        " - su inversa $P^{-1}$  \n",
        "3. Comprueba que se cumple que $A^3=PD^3P^{-1}$"
      ],
      "metadata": {
        "id": "KOhR4DdkL7kg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **SOLUCIÓN 3.7**"
      ],
      "metadata": {
        "id": "ISRQFnlItabH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Matriz diagonal** $D$ **(incluye los autovalores)**"
      ],
      "metadata": {
        "id": "cm4Wz6aB2NEU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "A = np.array([[-1,-2,3,-1], [0,2,0,0], [0,0,2,0], [0,0,0,1]])\n",
        "d,P = np.linalg.eig(A)\n",
        "D = np.diag(d)\n",
        "print(D)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W3pqlVwy2R6F",
        "outputId": "045c7b5c-ac67-44dd-cf8d-62d7427a1f39"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[-1.  0.  0.  0.]\n",
            " [ 0.  2.  0.  0.]\n",
            " [ 0.  0.  2.  0.]\n",
            " [ 0.  0.  0.  1.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Matriz de paso $P$** **(incluye los autovectores)**"
      ],
      "metadata": {
        "id": "po5iZncV213U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "A = np.array([[-1,-2,3,-1], [0,2,0,0], [0,0,2,0], [0,0,0,1]])\n",
        "print(P)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lCEgTITe277x",
        "outputId": "c2e34c7d-ff98-4209-98bd-777c16396b48"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 1.         -0.5547002   0.70710678 -0.4472136 ]\n",
            " [ 0.          0.83205029  0.          0.        ]\n",
            " [ 0.          0.          0.70710678  0.        ]\n",
            " [ 0.          0.          0.          0.89442719]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Inversa $P^{-1}$**"
      ],
      "metadata": {
        "id": "SpzqimwL3ILl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "A = np.array([[-1,-2,3,-1], [0,2,0,0], [0,0,2,0], [0,0,0,1]])\n",
        "print( np.linalg.inv(P))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LuJLdBS93Hk7",
        "outputId": "7fa98e06-0e5a-4f93-f314-61e9afb8d130"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 1.          0.66666667 -1.          0.5       ]\n",
            " [ 0.          1.20185043  0.          0.        ]\n",
            " [ 0.          0.          1.41421356  0.        ]\n",
            " [ 0.          0.          0.          1.11803399]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Comprobar que se cumple que $A^3=PD^3P^{-1}$**"
      ],
      "metadata": {
        "id": "JoNe3WjE3d4J"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Primero calculamos $A^3$**"
      ],
      "metadata": {
        "id": "nVSG-wOD32Yl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "A = np.array([[-1,-2,3,-1], [0,2,0,0], [0,0,2,0], [0,0,0,1]])\n",
        "print(A@A@A)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "armwUrpg3rKw",
        "outputId": "cb65f1e2-27dc-46c7-c47c-444515c57968"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[-1 -6  9 -1]\n",
            " [ 0  8  0  0]\n",
            " [ 0  0  8  0]\n",
            " [ 0  0  0  1]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ahora realizamos $PD^3P^{-1}$**"
      ],
      "metadata": {
        "id": "NM3-vCYb4DMc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "A = np.array([[-1,-2,3,-1], [0,2,0,0], [0,0,2,0], [0,0,0,1]])\n",
        "d,P = np.linalg.eig(A)\n",
        "D = np.diag(d)\n",
        "Dcubo = D @ D @ D\n",
        "print(P @ Dcubo @ np.linalg.inv(P))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2G-DF_n74QSA",
        "outputId": "58e9e307-84b7-4eca-e1ff-61d218a99943"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[-1. -6.  9. -1.]\n",
            " [ 0.  8.  0.  0.]\n",
            " [ 0.  0.  8.  0.]\n",
            " [ 0.  0.  0.  1.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Para finalizar podemos comprobar que sí se cumple.**"
      ],
      "metadata": {
        "id": "UwSVIFN74v4F"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Práctica 3.8**\n",
        "**Diagonalización con Octave**\n",
        "\n",
        "Resuelva el ejercicio anterior, pero en esta ocasión utilizando Octave."
      ],
      "metadata": {
        "id": "tqHIq-of_N_v"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **SOLUCIÓN 3.8**"
      ],
      "metadata": {
        "id": "KHGFVTFd8-bp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!apt install octave"
      ],
      "metadata": {
        "id": "Pau7jig99xOL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile Diagonalización\n",
        "A = [-1,-2,3,-1; 0,2,0,0; 0,0,2,0; 0,0,0,1]\n",
        "[P,D]=eig(A) \n",
        "Pinversa = P^-1\n",
        "Acubo = A^3\n",
        "PxDcuboXPinv = P*D^3*P^-1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gz5ZTQFK-Oqa",
        "outputId": "71fd6b7b-e76a-4d37-b151-f309bd041acc"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting Diagonalización\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!octave Diagonalización"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GCxbiZFy-oTT",
        "outputId": "e3372ccb-3e2c-4edb-d1af-f96a2b3fcbdd"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "octave: X11 DISPLAY environment variable not set\n",
            "octave: disabling GUI features\n",
            "A =\n",
            "\n",
            "  -1  -2   3  -1\n",
            "   0   2   0   0\n",
            "   0   0   2   0\n",
            "   0   0   0   1\n",
            "\n",
            "P =\n",
            "\n",
            "   1.00000  -0.55470   0.70711  -0.44721\n",
            "   0.00000   0.83205   0.00000   0.00000\n",
            "   0.00000   0.00000   0.70711   0.00000\n",
            "   0.00000   0.00000   0.00000   0.89443\n",
            "\n",
            "D =\n",
            "\n",
            "Diagonal Matrix\n",
            "\n",
            "  -1   0   0   0\n",
            "   0   2   0   0\n",
            "   0   0   2   0\n",
            "   0   0   0   1\n",
            "\n",
            "Pinversa =\n",
            "\n",
            "   1.00000   0.66667  -1.00000   0.50000\n",
            "   0.00000   1.20185  -0.00000  -0.00000\n",
            "   0.00000   0.00000   1.41421  -0.00000\n",
            "   0.00000   0.00000   0.00000   1.11803\n",
            "\n",
            "Acubo =\n",
            "\n",
            "  -1  -6   9  -1\n",
            "   0   8   0   0\n",
            "   0   0   8   0\n",
            "   0   0   0   1\n",
            "\n",
            "PxDcuboXPinv =\n",
            "\n",
            "  -1  -6   9  -1\n",
            "   0   8   0   0\n",
            "   0   0   8   0\n",
            "   0   0   0   1\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Práctica 3.9**\n",
        "**Libertad para elegir el lugar de trabajo**  \n",
        "Resolver con **Octave**.\n",
        "\n",
        "Una empresa de 1.000 empleados permite que sus trabajadores cada día acudan a trabajar a la oficina o que realicen su trabajo desde su casa. Inicialmente el 90% de la plantilla trabajaba en la oficina y solo el 10% lo hacían en casa. Se ha observado que los que un día trabajan en casa tienen una probabilidad del 70% de realizarlo también desde casa al día siguiente, pero que en el restante 30% de los casos acuden a la oficina al día siguiente. Por el contrario, se ha observado que los que un día trabajaron en la oficina al día siguiente vuelven\n",
        "a la oficina en el 60% de los casos y en el 40% restante van a su casa al día siguiente.\n",
        "* Determinar qué número de empleados se quedan en casa transcurridos dos días.\n",
        "* ¿Y a largo plazo cuantos se quedan en casa?"
      ],
      "metadata": {
        "id": "Aw283nkjdtcQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **SOLUCIÓN 3.9**\n",
        "<img src=\"https://github.com/financieras/math/blob/main/img/grafo_markov09.png?raw=1\" alt=\"autosABC\" width=\"300\">\n",
        "\n",
        "* **Empleados = 1.000**"
      ],
      "metadata": {
        "id": "-RiLBnafUodD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!apt install octave"
      ],
      "metadata": {
        "id": "KTSEltv2xr2f"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile Lugardetrabajo\n",
        "empleados = 1000\n",
        "% state vector\n",
        "inicial = [.9; .1]\n",
        "% transition probability matrix\n",
        "A = [.6, .3; .4, .7]\n",
        "[P,D]=eig(A)\n",
        "Dcuadrado = D^2\n",
        "Acuadrado = A^2\n",
        "PxDcuadradoXPinv = P*Dcuadrado*P^-1\n",
        "dia2 = Acuadrado * inicial\n",
        "disp(\"Nº de empleados que se quedan en casa el segundo día: \"), disp(dia2(2)*empleados)\n",
        "D10 = D^10\n",
        "A10 = P*D10*P^-1\n",
        "dia10 = A10 * inicial\n",
        "disp(\"Nº de empleados que se quedan en casa a largo plazo son: \"), disp(dia10(2)*empleados)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-T1JJQSzUwzO",
        "outputId": "18c23dfb-8781-45c7-8657-b47cce26c806"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting Lugardetrabajo\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!octave Lugardetrabajo"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "euoSZ5BkVbTn",
        "outputId": "34494b72-75d1-49f2-fa66-91d2ebc099af"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "octave: X11 DISPLAY environment variable not set\n",
            "octave: disabling GUI features\n",
            "empleados =  1000\n",
            "inicial =\n",
            "\n",
            "   0.90000\n",
            "   0.10000\n",
            "\n",
            "A =\n",
            "\n",
            "   0.60000   0.30000\n",
            "   0.40000   0.70000\n",
            "\n",
            "P =\n",
            "\n",
            "  -0.70711  -0.60000\n",
            "   0.70711  -0.80000\n",
            "\n",
            "D =\n",
            "\n",
            "Diagonal Matrix\n",
            "\n",
            "   0.30000         0\n",
            "         0   1.00000\n",
            "\n",
            "Dcuadrado =\n",
            "\n",
            "Diagonal Matrix\n",
            "\n",
            "   0.090000          0\n",
            "          0   1.000000\n",
            "\n",
            "Acuadrado =\n",
            "\n",
            "   0.48000   0.39000\n",
            "   0.52000   0.61000\n",
            "\n",
            "PxDcuadradoXPinv =\n",
            "\n",
            "   0.48000   0.39000\n",
            "   0.52000   0.61000\n",
            "\n",
            "dia2 =\n",
            "\n",
            "   0.47100\n",
            "   0.52900\n",
            "\n",
            "Nº de empleados que se quedan en casa el segundo día: \n",
            " 529\n",
            "D10 =\n",
            "\n",
            "Diagonal Matrix\n",
            "\n",
            "   5.9049e-06            0\n",
            "            0   1.0000e+00\n",
            "\n",
            "A10 =\n",
            "\n",
            "   0.42857   0.42857\n",
            "   0.57143   0.57143\n",
            "\n",
            "dia10 =\n",
            "\n",
            "   0.42857\n",
            "   0.57143\n",
            "\n",
            "Nº de empleados que se quedan en casa a largo plazo son: \n",
            " 571.43\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* **Determinar qué número de empleados se quedan en casa transcurridos dos días.** \n",
        "\n",
        "Como bien lo hemos resuelto mediante octave, el resultado es: 529 empleados se quedan en casa transcurridos dos días.\n",
        "* **¿Y a largo plazo cuantos se quedan en casa?**\n",
        "\n",
        "También gracias a octave, el resultado es: 571,43 empleados se quedan en casa a largo plazo."
      ],
      "metadata": {
        "id": "Oqp89aySXkzF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Práctica 3.10**\n",
        "**Tendencia del mercado**  \n",
        "Resolver con **Python**.\n",
        "\n",
        "En el mercado de automóviles de gran lujo únicamente se disputan la clientela dos marcas (A y B). Las ventas son $M=100.000$ automóviles anuales, no variando esta cifra con el transcurso de los años. La marca A es líder de mercado en este momento con el 75% de las ventas. Sus directivos desean consolidar su liderazgo e incluso aumentarlo, para lo cual todos los años efectúan una fuerte campaña publicitaria con la que consiguen cada año un 40% de los que fueron clientes de su competidora, aunque la empresa A pierde un 20% de sus clientes que se van a la competencia.\n",
        "* ¿Cuál es la situación a los 3 años?\n",
        "* ¿Y al cabo de mucho tiempo?"
      ],
      "metadata": {
        "id": "lllngWn__QP0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **SOLUCIÓN 3.10**\n",
        "<img src=\"https://github.com/financieras/math/blob/main/img/grafo_markov10.png?raw=1\" alt=\"grafo\" width=\"300\">\n",
        "\n",
        "\n",
        "* **Ventas = 100.000**"
      ],
      "metadata": {
        "id": "2ZRziEetZwMt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "X0 = np.array([.75, .25])\n",
        "A = np.array([[.8, .4], [.2 ,.6]])\n",
        "X3 = A@A@A@X0\n",
        "X20 = A@A@A@A@A@A@A@A@A@A@A@A@A@A@A@A@A@A@A@A@X0\n",
        "print(\"Situación a los tres años:\", X3)\n",
        "print(\"Situación a los veinte años:\", X20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5WLc3bNWc-f1",
        "outputId": "d3395e21-6a3e-4b4b-b80a-04d35d7d892d"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Situación a los tres años: [0.672 0.328]\n",
            "Situación a los veinte años: [0.66666667 0.33333333]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* **¿Cuál es la situación a los 3 años?**\n",
        "\n",
        "Gracias a Python sabemos que la situación dentro de 3 años será, que la marca A seguirá siendo lider en el mercado con un 67,2% de las ventas y la empresa B contará con 32,8% \n",
        "* **¿Y al cabo de mucho tiempo?**\n",
        "\n",
        "Tambén mediante Python podemos saber cual será la situación dentro de mucho tiempo, 20 años, la empresa A se encargará de 2/3 de las ventas y la empresa B del 1/3 restante, es decir por mucho que pasen los años la emrpesa A siempre será lider."
      ],
      "metadata": {
        "id": "G2LSliw-eUSB"
      }
    }
  ]
}